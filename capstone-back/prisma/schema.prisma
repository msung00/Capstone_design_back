generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Roles {
  ADMIN
  USER
  CLUBADMIN
}

enum ClubStatus {
  PENDING
  REJECTED
  ACCEPTED
}

enum ApplicationStatus {
  PENDING
  REJECTED
  ACCEPTED
}

model User {
  userId           Int                @id @default(autoincrement()) @map("user_id")
  kakaoId          String             @unique @map("kakao_id")
  nickname         String             @map("nick_name")
  name             String
  email            String             @unique
  phone            String             @unique
  school           String
  major            String
  role             Roles              @default(USER)
  studentId        Int                @map("student_id")
  trades           Trade[]            @relation("UserTrades")
  purchases        Trade[]            @relation("UserPurchases")
  comments         TradeComment[]     @relation("UserComments")
  likes            TradeLike[]        @relation("UserLikes")
  board            Board[]            @relation("UserBoards")
  boardComments    BoardComment[]     @relation("UserBoardComments")
  boardLikes       BoardLike[]        @relation("UserBoardLikes")
  response         AppResponse[]
  roomParticipants RoomParticipant[]  @relation("UserRoomParticipants")
  chats            Chat[]
  ClubParticipants ClubParticipants[]
  imageId          Int?               @unique @map("image_id")
  image            Image?             @relation("UserImage", fields: [imageId], references: [id])
}

model Trade {
  tradeId   Int            @id @default(autoincrement()) @map("trade_id")
  title     String
  author    String
  price     Int
  sold      Boolean        @default(false)
  seller    User           @relation("UserTrades", fields: [sellerId], references: [userId])
  sellerId  Int            @map("seller_id")
  buyer     User?          @relation("UserPurchases", fields: [buyerId], references: [userId])
  buyerId   Int?           @map("buyer_id")
  createAt  DateTime       @default(now()) @map("create_at")
  updateAt  DateTime       @updatedAt
  views     Int            @default(0)
  comments  TradeComment[] @relation("TradeComments")
  likes     TradeLike[]    @relation("TradeLikes")
  likeCount Int            @default(0) @map("like_count")
  room      Room?
  Image     Image[]        @relation("TradeImages")
}

model Club {
  clubId           Int                @id @default(autoincrement()) @map("club_id")
  name             String
  school           String
  location         String
  description      String
  status           ClubStatus         @default(PENDING)
  adminList        Json               @default("[]") @map("admin_list") @db.Json
  userList         Json               @default("[]") @map("user_list") @db.Json
  applications     Application[]
  receipt          Receipt[]
  room             Room?
  calendar         Calendar[]
  ClubParticipants ClubParticipants[]
  imageId          Int?               @unique @map("image_id")
  Image            Image?             @relation("ClubImage", fields: [imageId], references: [id])
}

model ClubParticipants {
  clubId   Int      @map("club_id")
  userId   Int      @map("user_id")
  joinedAt DateTime @default(now()) @map("joined_at")
  club     Club     @relation(fields: [clubId], references: [clubId])
  user     User     @relation(fields: [userId], references: [userId])

  @@id([clubId, userId])
}

model TradeComment {
  commentId       Int            @id @default(autoincrement()) @map("comment_id")
  content         String
  createdAt       DateTime       @default(now())
  user            User           @relation("UserComments", fields: [userId], references: [userId])
  userId          Int            @map("user_id")
  trade           Trade          @relation("TradeComments", fields: [tradeId], references: [tradeId])
  tradeId         Int            @map("trade_id")
  parentComment   TradeComment?  @relation("TradeReplies", fields: [parentCommentId], references: [commentId])
  parentCommentId Int?
  replies         TradeComment[] @relation("TradeReplies")
}

model TradeLike {
  likeId    Int      @id @default(autoincrement()) @map("like_id")
  trade     Trade    @relation("TradeLikes", fields: [tradeId], references: [tradeId])
  tradeId   Int      @map("trade_id")
  user      User     @relation("UserLikes", fields: [userId], references: [userId])
  userId    Int      @map("user_id")
  createdAt DateTime @default(now())

  @@unique([userId, tradeId])
}

model Board {
  boardId   Int            @id @default(autoincrement()) @map("board_id")
  title     String
  content   String
  createAt  DateTime       @default(now())
  updateAt  DateTime       @updatedAt
  author    User           @relation("UserBoards", fields: [authorId], references: [userId])
  authorId  Int            @map("author_id")
  views     Int            @default(0)
  comments  BoardComment[] @relation("BoardComments")
  likes     BoardLike[]    @relation("BoardLikes")
  likeCount Int            @default(0)
}

model BoardComment {
  commentId       Int            @id @default(autoincrement()) @map("comment_id")
  content         String
  createdAt       DateTime       @default(now())
  user            User           @relation("UserBoardComments", fields: [userId], references: [userId])
  userId          Int            @map("user_id")
  board           Board          @relation("BoardComments", fields: [boardId], references: [boardId])
  boardId         Int            @map("board_id")
  parentComment   BoardComment?  @relation("BoardReplies", fields: [parentCommentId], references: [commentId])
  parentCommentId Int?
  replies         BoardComment[] @relation("BoardReplies")
}

model BoardLike {
  likeId    Int      @id @default(autoincrement()) @map("like_id")
  board     Board    @relation("BoardLikes", fields: [boardId], references: [boardId])
  boardId   Int      @map("board_id")
  user      User     @relation("UserBoardLikes", fields: [userId], references: [userId])
  userId    Int      @map("user_id")
  createdAt DateTime @default(now())

  @@unique([userId, boardId])
}

model Room {
  id           String            @id
  createdAt    DateTime          @default(now()) @map("created_at")
  participants RoomParticipant[]
  chats        Chat[]
  trade        Trade?            @relation(fields: [tradeId], references: [tradeId])
  tradeId      Int?              @unique @map("trade_id")
  club         Club?             @relation(fields: [clubId], references: [clubId])
  clubId       Int?              @unique @map("club_id")
  type         String // "TRADE" or "CLUB" to identify the room type
}

model RoomParticipant {
  roomId   String   @map("room_id")
  userId   Int      @map("user_id")
  role     String   @default("member")
  joinedAt DateTime @default(now()) @map("joined_at")
  room     Room     @relation(fields: [roomId], references: [id])
  user     User     @relation("UserRoomParticipants", fields: [userId], references: [userId])

  @@id([roomId, userId])
}

model Chat {
  id        Int      @id @default(autoincrement())
  roomId    String   @map("room_id")
  userId    Int      @map("user_id")
  content   String?
  room      Room     @relation(fields: [roomId], references: [id])
  user      User     @relation(fields: [userId], references: [userId])
  createdAt DateTime @default(now()) @map("created_at")
  imageId   Int?     @unique
  image     Image?   @relation("ChatImage", fields: [imageId], references: [id])
}

model Image {
  id             Int       @id @default(autoincrement())
  name           String
  path           String
  size           Int
  width          Int
  height         Int
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  User           User?     @relation("UserImage")
  uploadedUserId Int
  deletedAt      DateTime?
  additionalInfo Json
  tradeId        Int?
  chatId         Int?      @unique
  userId         Int?      @unique
  Trade          Trade?    @relation("TradeImages", fields: [tradeId], references: [tradeId])
  Chat           Chat?     @relation("ChatImage")
  Club           Club?     @relation("ClubImage")
  clubId         Int?
}

model Application {
  applicationId Int           @id @default(autoincrement()) @map("application_id")
  title         String
  questions     Json          @default("[]")
  club          Club          @relation(fields: [clubId], references: [clubId])
  clubId        Int           @map("club_id")
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt
  response      AppResponse[]
}

model AppResponse {
  responseId    Int               @id @default(autoincrement()) @map("response_id")
  application   Application       @relation(fields: [applicationId], references: [applicationId])
  applicationId Int               @map("application_id")
  user          User              @relation(fields: [userId], references: [userId])
  userId        Int               @map("user_id")
  answers       Json              @default("[]")
  createdAt     DateTime          @default(now()) @map("created_at")
  status        ApplicationStatus @default(PENDING)
}

model Receipt {
  receiptId   Int    @id @default(autoincrement()) @map("receipt_id")
  type        String
  title       String
  description String
  receiptDate String @map("receipt_date")
  amount      Int
  club        Club   @relation(fields: [clubId], references: [clubId])
  clubId      Int    @map("club_id")
}

model Calendar {
  calendarId  Int    @id @default(autoincrement()) @map("calendar_id")
  date        String
  title       String
  description String
  club        Club   @relation(fields: [clubId], references: [clubId])
  clubId      Int    @map("club_id")
}

generator markdown {
  provider = "prisma-markdown"
  output   = "./ERD.md"
  title    = "Sinchon ICPC Camp ERD"
}
