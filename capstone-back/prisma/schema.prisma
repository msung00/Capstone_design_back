generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Roles {
  ADMIN
  USER
  CLUBADMIN
}

enum ClubStatus {
  PENDING
  REJECTED
  ACCEPTED
}

enum ApplicationStatus {
  PENDING
  REJECTED
  ACCEPTED
}

model User {
  userId        Int            @id @default(autoincrement()) @map("user_id")
  kakaoId       String         @unique @map("kakao_id")
  nickName      String         @map("nick_name")
  name          String
  email         String         @unique
  phone         String         @unique
  school        String
  major         String
  role          Roles          @default(USER)
  studentId     Int            @map("student_id")
  trades        Trade[]        @relation("UserTrades")
  purchases     Trade[]        @relation("UserPurchases")
  comments      TradeComment[] @relation("UserComments")
  likes         TradeLike[]    @relation("UserLikes")
  board         Board[]        @relation("UserBoards")
  boardComments BoardComment[] @relation("UserBoardComments")
  boardLikes    BoardLike[]    @relation("UserBoardLikes")
  Message       Message[]
  Room          Room[]         @relation("UserRooms")
  response      AppResponse[]
}

model Trade {
  tradeId   Int            @id @default(autoincrement()) @map("trade_id")
  title     String
  author    String
  price     Int
  sold      Boolean        @default(false)
  seller    User           @relation("UserTrades", fields: [sellerId], references: [userId])
  sellerId  Int            @map("seller_id")
  buyer     User?          @relation("UserPurchases", fields: [buyerId], references: [userId])
  buyerId   Int?           @map("buyer_id")
  createAt  DateTime       @default(now()) @map("create_at")
  updateAt  DateTime       @updatedAt
  views     Int            @default(0)
  comments  TradeComment[] @relation("TradeComments")
  likes     TradeLike[]    @relation("TradeLikes")
  likeCount Int            @default(0) @map("like_count")
}

model Club {
  clubId       Int           @id @default(autoincrement()) @map("club_id")
  name         String
  location     String
  description  String
  status       ClubStatus    @default(PENDING)
  imageUrl     String        @map("image_url")
  adminList    Json          @default("[]") @map("admin_list")
  applications Application[]
}

model TradeComment {
  commentId       Int            @id @default(autoincrement()) @map("comment_id")
  content         String
  createdAt       DateTime       @default(now())
  user            User           @relation("UserComments", fields: [userId], references: [userId])
  userId          Int            @map("user_id")
  trade           Trade          @relation("TradeComments", fields: [tradeId], references: [tradeId])
  tradeId         Int            @map("trade_id")
  parentComment   TradeComment?  @relation("TradeReplies", fields: [parentCommentId], references: [commentId])
  parentCommentId Int?
  replies         TradeComment[] @relation("TradeReplies")
}

model TradeLike {
  likeId    Int      @id @default(autoincrement()) @map("like_id")
  trade     Trade    @relation("TradeLikes", fields: [tradeId], references: [tradeId])
  tradeId   Int      @map("trade_id")
  user      User     @relation("UserLikes", fields: [userId], references: [userId])
  userId    Int      @map("user_id")
  createdAt DateTime @default(now())

  @@unique([userId, tradeId])
}

model Board {
  boardId   Int            @id @default(autoincrement()) @map("board_id")
  title     String
  content   String
  createAt  DateTime       @default(now())
  updateAt  DateTime       @updatedAt
  author    User           @relation("UserBoards", fields: [authorId], references: [userId])
  authorId  Int            @map("author_id")
  authorNickname  String   @map("author_nickname")
  views     Int            @default(0)
  comments  BoardComment[] @relation("BoardComments")
  likes     BoardLike[]    @relation("BoardLikes")
  likeCount Int            @default(0)
}

model BoardComment {
  commentId       Int            @id @default(autoincrement()) @map("comment_id")
  content         String
  createdAt       DateTime       @default(now())
  user            User           @relation("UserBoardComments", fields: [userId], references: [userId])
  userId          Int            @map("user_id")
  board           Board          @relation("BoardComments", fields: [boardId], references: [boardId])
  boardId         Int            @map("board_id")
  parentComment   BoardComment?  @relation("BoardReplies", fields: [parentCommentId], references: [commentId])
  parentCommentId Int?
  replies         BoardComment[] @relation("BoardReplies")
}

model BoardLike {
  likeId    Int      @id @default(autoincrement()) @map("like_id")
  board     Board    @relation("BoardLikes", fields: [boardId], references: [boardId])
  boardId   Int      @map("board_id")
  user      User     @relation("UserBoardLikes", fields: [userId], references: [userId])
  userId    Int      @map("user_id")
  createdAt DateTime @default(now())

  @@unique([userId, boardId])
}

model Room {
  roomId      Int       @id @default(autoincrement()) @map("room_id")
  name        String
  description String?
  createdAt   DateTime  @default(now()) @map("created_at")
  messages    Message[]
  users       User[]    @relation("UserRooms")
}

model Message {
  messageId Int      @id @default(autoincrement()) @map("message_id")
  content   String
  timestamp DateTime @default(now()) @map("timestamp")
  roomId    Int
  senderId  Int
  room      Room     @relation(fields: [roomId], references: [roomId])
  sender    User     @relation(fields: [senderId], references: [userId])
}

model Application {
  applicationId Int           @id @default(autoincrement()) @map("application_id")
  from          DateTime
  to            DateTime
  interviewFrom DateTime      @map("interview_from")
  interviewTo   DateTime      @map("interview_to")
  title         String
  questions     Json          @default("[]")
  club          Club          @relation(fields: [clubId], references: [clubId])
  clubId        Int           @map("club_id")
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt
  response      AppResponse[]
}

model AppResponse {
  responseId    Int               @id @default(autoincrement()) @map("response_id")
  application   Application       @relation(fields: [applicationId], references: [applicationId])
  applicationId Int               @map("application_id")
  user          User              @relation(fields: [userId], references: [userId])
  userId        Int               @map("user_id")
  answers       Json              @default("[]")
  createdAt     DateTime          @default(now()) @map("created_at")
  status        ApplicationStatus @default(PENDING)
}

