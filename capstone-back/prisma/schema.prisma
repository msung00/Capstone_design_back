generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Roles {
  ADMIN
  USER
}

enum ClubStatus {
  PENDING
  REJECTED
  ACCEPTED
}

model User {
  userId    Int            @id @default(autoincrement()) @map("user_id")
  kakaoId   String         @unique @map("kakao_id")
  nickName  String         @map("nick_name")
  name      String
  email     String         @unique
  phone     String         @unique
  school    String
  major     String
  role      Roles          @default(USER)
  studentId Int            @map("student_id")
  trades    Trade[]        @relation("UserTrades")
  purchases Trade[]        @relation("UserPurchases")
  comments  TradeComment[] @relation("UserComments")
  likes     TradeLike[]    @relation("UserLikes")
}

model Trade {
  tradeId   Int            @id @default(autoincrement()) @map("trade_id")
  title     String
  author    String
  price     Int
  sold      Boolean        @default(false)
  seller    User           @relation("UserTrades", fields: [sellerId], references: [userId])
  sellerId  Int            @map("seller_id")
  buyer     User?          @relation("UserPurchases", fields: [buyerId], references: [userId])
  buyerId   Int?           @map("buyer_id")
  createAt  DateTime       @default(now()) @map("create_at")
  updateAt  DateTime       @updatedAt
  views     Int            @default(0)
  comments  TradeComment[] @relation("TradeComments")
  likes     TradeLike[]    @relation("TradeLikes")
  likeCount Int            @default(0) @map("like_count")
}

model Club {
  clubId      Int        @id @default(autoincrement()) @map("club_id")
  name        String
  location    String
  description String
  status      ClubStatus @default(PENDING)
}

model TradeComment {
  commentId       Int            @id @default(autoincrement()) @map("comment_id")
  content         String
  createdAt       DateTime       @default(now())
  user            User           @relation("UserComments", fields: [userId], references: [userId])
  userId          Int            @map("user_id")
  trade           Trade          @relation("TradeComments", fields: [tradeId], references: [tradeId])
  tradeId         Int            @map("trade_id")
  parentComment   TradeComment?  @relation("TradeReplies", fields: [parentCommentId], references: [commentId])
  parentCommentId Int?
  replies         TradeComment[] @relation("TradeReplies")
}

model TradeLike {
  likeId    Int      @id @default(autoincrement()) @map("like_id")
  trade     Trade    @relation("TradeLikes", fields: [tradeId], references: [tradeId])
  tradeId   Int      @map("trade_id")
  user      User     @relation("UserLikes", fields: [userId], references: [userId])
  userId    Int      @map("user_id")
  createdAt DateTime @default(now())

  @@unique([userId, tradeId])
}
